// # Types, take I.
//
// After some exploration, let’s start implementing something. There are many
// things I want (generics, type inference, row types, ...), but what is
// important to get done first?

// ## Typeclasses
//
// One immediate problem at hand is that I want to call `contains` on sets and
// dicts, and I want to call `len` on multiple things. That works if we have
// methods that are builtin, but defining them is tedious. Perhaps this would
// be the simplest approach after all though; we can just define a method with
// the same name on multiple types. Then secondly there are operators, though
// we could alias them to methods and have the same behavior.
//
// All of that works if I have true methods, but I don’t like that user-defined
// functions would not have the privilege of method call syntax. Also, while
// methods work nicely if you already know the type, they are more difficult for
// type inference. So let’s make method calls sugar for free functions, and then
// add typeclasses to overload them. Let's call them traits to not be too
// foreign to Rust people.

// Pseudo-syntax, all traits are built-in. (?)
trait Collection[T] {
  len: Self -> Int;
  contains: (Self, T) -> Bool;
};

// Pseudo-syntax, these are built-in types.
impl forall T :: Collection[T] for List[T];
impl forall T ::  Collection[T] for Set[T];
impl forall K, V :: Collection[K] for Dict[K, V];

let my_len
  : forall T, C: Collection[T] :: C -> Int
  = collection => collection.len();

// Or maybe methods should be special after all? So we can scope them somehow?
// Then you can't write the collection-generic my_len, but do we really need it?
// But then, can users define methods on types?

type Person = {
  first_name: String,
  last_name: String,
}

impl Person {
  full_name = self => f"{self.first_name} {self.last_name}";
}

// So maybe, when I define a type, I can define an impl block for it too. Then
// when field access is resolved, we’ll check all the impl blocks for that type?
// Although, then how do we know what the type is?

impl Dict[K, V] {
  len: Self -> Int = std.builtins.dict_len;
  contains: (Self, K) -> Bool = std.builtins.dict_contains;
}

impl Set[T] {
  len: Self -> Int = std.builtins.set_len;
  contains: (Self, T) -> Bool = std.builtins.set_contains;
}

// What is the inferred type for this? Maybe we just throw a type error?
let has_name = x => x.contains("name");

// Or maybe we can make `element` type constraints. Something like
let has_name: $4 -> Bool = (x: $4) => x.contains("name");
where
  $1 == $1 // Instantiate Dict.K
  $2 == $2 // Instantiate Dict.V
  $3 == $3 // Instantiate Set.T
  $4 in {Dict[$1, $2], Set[$3]}
  $1 == $3

// That would also help to type the {} literal:
let empty: $4 = {};
where $4 in {Dict[$1, $2], Set[$3]}

// But now we get nominal types ... if we are going to add row types for the
// dicts anyway, maybe methods should work in the same way?
let has_name: $2 -> Bool = (x: $2) => x.contains("name");
where
  $1
  $2 == { contains: ($2, String) -> Bool, ..$1 }

// The namespaces overlap though ... should methods and fields have different
// syntax after all? Like Lua? Maybe -> for field access after all?
department->employees.contains("Deckard");
// It is kind of acceptable I'd say.
let tags = {for server in config->servers: for tag in server->tags: tags};

// But let's stick with the row type idea. Maybe everything is a dict with
// fields, but they behave differently with respect to serialization etc.? Or
// maybe this is where "prototypes" come in, and I need to look up methods in
// a type's prototype when the fields are not there? But then how would it work?

// I think I'm way overcomplicating things. I don't need to be able to write a
// generic has_name function. Let's just make it an error and say that type
// annotations are required to make it work.

// Then for user-defined methods, an impl block would be kind of elegant, I
// think. You import it together with the type (which I still need to sort out
// anyway) and due to structural types, if it matches you're good to go. Recall:

type Person = {
  first_name: String,
  last_name: String,
};

impl Person {
  full_name = self => f"{self.first_name} {self.last_name}";
};

let deckard = {
  first_name = "Rick";
  last_name = "Deckard";
};
// Ok, we can tell that the variable has type Person, so we can resolve the
// method.
deckard.full_name()

let rachael = {
  first_name = "Rachael";
  last_name = "Tyrell";
  generation = "Nexus-7";
};
// Not ok, the extra field makes this not a Person ... unless we implicitly
// allow more fields, but I don't like doing that because if you define a
// schema, I want errors if I violate it, not accidentally carrying on data that
// is then unchecked (although missing fields would cause an error).
rachael.full_name()

// But we could have defined this:
type Person = { first_name: String, last_name: String, ... };
// And then the .full_name would work.

// How does the scoping work?
// If `let` binds a value to a name, then `impl` might bind the impl'd functions
// to names, but in a separate namespace, only for method calls.
// And `type` would do the same but for yet another namespace. Then when a
// module (a file) evaluates to some value, we might take the environment in
// which that value was produced as the exported types and impls. Or maybe I do
// give dicts a dual purpose, and they can carry values as well as types.

// person.rcl:
type Person = { name: String, age: Int };
{
  export Person;
  version = "1.0.0";
}

// data.rcl
let type Person, version = import "person.rcl";

// Though having to write "Type" to disambiguate is not so nice, and also this
// works very differently than any other language. Maybe types should just be
// definitions in the file.
// person.rcl:
export type Person = { name: String, age: Int };
{}

// data.rcl:
// An import expression that lists in parens, loads those types into the current
// scope. It's an expression in the same sense that `let` is, it should be read
// `import ... (...) in ...`.
import "person.rcl" (Person);

// An import without parens returns its expression.
let empty = import "person.rcl";
