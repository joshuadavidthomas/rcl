// Any expression can carry a type annotation.
// Generic types are instantiated using square brackets.
let e1 = {}: Set[Int];
let e2 = {}: Dict[String, Int];

// Bindings can also carry type annotations.
let e1: Set[Int] = {};
let e2: Dict[String, Int] = {};
// Actually, maybe only bindings should be allowed to carry annotations.

// Lambdas can have annotations on arguments.
let f = (x: Int) => x * 2;

// Is there syntax for function types? Sure.
let f: (Int) -> Int = x => x * 2;

// Dicts types are written with {}.
let deckard: { name: String, age: Int } = { name = "Deckard"; age = 36; };

// As we can bind values to names with 'let', we can bind types to names with
// 'type'.
type Person = {
  name: String,
  age: Int,
};
// Or should it maybe be 'let type'?

// How do we do imports? If every document is an expression, then importing just
// imports values:
let y = import "y.rcl";

// But if the file contains a dict, we can specify what to import, which would
// aid in laziness if we ever switch to partially lazy evaluation, because we
// could avoid evaluating many parts of the dict.
let y2 = import "y.rcl" (x, y, "non-identifier key");

// But how to import types? We may export types as part of a dict. For the
// purposes of json serialization etc., dict only hold their fields. But they
// might also have type members.
let data = {
  type Person = { name: String, age: Int };
  people = [
    { name = "Deckard"; age = 40; },
    { name = "Rachael"; age = 23; },
  ];
};

// Then we could import from that.
let y2 = import "data.rcl" (people, type Person);
let batty: y2.Person = { name = "Batty"; age = 38; };
// Could we import the types without assignment?
import "data.rcl" (type Person);
// Or maybe pattern matching?
let { type Person, people } = import "data.rcl";

// If types can live in dict, then we have to mix values and types. Is that a
// problem?
let x: { name = "foo"; type Bar = Int; }.Bar = 32;
