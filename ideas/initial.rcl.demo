// RCL -- A reasonable configuration language.
// Copyright 2023 Ruud van Asseldonk

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// A copy of the License has been included in the root of the repository.

// Note, we can write dict fields in two ways: With `:` or with `=`. In the
// former case, both sides are expressions. This means that the keys can be
// determined at runtime, for example in a comprehension. In the latter case,
// the left-hand side must be an identifier, and we save one character on the
// quotes. It also looks a bit less cluttered.
// The following lines are therefore identical.
{ "foo": 32, "bar": "xyz" }
{ foo = 32, bar = "xyz" }
{ foo = 32, "bar": "xyz" }
let key = "foo"; { key: 32, bar = "xyz" }

// TODO: How to terminate lets? let ...  in, or let ...; ?

// Some terminology to decide on:
// - record (more or less implies typed)
// - object (more or less implies typed)
// - dict, dictionary (implies untyped fields)
// - map (implies untyped fields)

// Defining a function.
let concat = (xs, ys) => [for x in xs: x, for y in ys: y];
concat([1, 2, 3], [4, 5, 6])

let fib = x => if x < 2 then 1 else fib(x - 1) + fib(x - 2); fib(100)

// We could support type annotations in let bindings and arguments.
let fib: Int -> Int = (x: Int) => ...;
let concat
  : List a -> List a -> List a
  = (xs, ys)
  => ...;
let concat = (xs: List a, ys: List a) => ...;

// Row types like in PureScript
type S3Bucket = {
  region: String,
  name: String,
};
let countObjects: S3Bucket -> { count: Int | S3Bucket } = ...;

// Type definitions can be recursive.
type Null = Unit;
type Json
  = Unit
  | Int
  | String
  | Map String Json
  | List Json
  ;

let parse_json: String -> Json = builtins.parse_json;

// I want assertions too. Assertions are nice. They can work exactly like let
// bindings, and in fact the same as assertions in Nix.
let fib = x =>
  assert x >= 0;
  if x < 2
    then 1
    else fib(x - 1) + fib(x - 2);

// Should if-then-else be with blocks as in Rust?
// No, curly brackes are already used for object literals.

// How to treat loading json?
// The following would work as long as we don't specify types. We could even
// infer a type for the data.
let data = load("data.json");

// But if we do that, then what is the type of `load`?
let load: String -> Json = builtins.load;

// The above would not work if we expect something more strict. Is it okay to
// only return Json and then return a type error? I think it is, because json
// data could change under our feet, we don't look inside it, or treat it as
// part of the config. Other rcl files on the other hand, they would have a
// definite type. But that is not something we can give a signature for, maybe
// that needs to be a built-in construct. So the following would in fact treat
// the json file as if it were an rcl file.
let data = import "data.json";

// So this may be valid:
type Person = { age: Int, xp: Int, name: String };
let people: List Person = import "data.json";

// But this would fail to typecheck.
let people: List Person = load("people.json")

// How could we make it typecheck? It would have to be something like
let people: List Person = validate(List Person, load("people.json"))

// but then we are lowering types to the value level ... that opens up an entire
// can of worms. Also how do we import types from other files? If types were
// values then at least that part is clear, although it would also be tedious.
// But maybe? Then it also resolves the syntax difference for generics, we could
// say that types can be called like functions (so we have kinds too).
let PersonList = List(Person);
let rec Json = Map(String, Json) | List(Json) | Int | String | Null;

// But putting that aside for now, a solution that does not open the can of
// worms is to introduce yet another special ad-hoc construct, so that
// syntactically we can *can* mix types and values without them polluting each
// other's namespaces:
let people: List(Person) = load("people.json") as List(Person);

// Hmm, if I call it "as", then it suddenly does not feel so ad-hoc any more,
// maybe this is actually pretty nice. Loading json in a format that you expect
// matches some schema, but then the typechecker complains ... that happens a
// lot. Now we could outsource this part to the language, built-in validation.
// At typecheck time we assume it works, at runtime if it doesn't it generates
// an error there, so it fails early instead of with some KeyError deep inside
// the code. This may be pretty nice!

// But then if we have union types, but the only way to get back from an `a | b`
// to just an `a` is through this runtime cast, that's not very nice, then you
// still don't get the power of ADTs and such. So what if next to this "as", we
// also introduce an "is"? But wait no, then you get control flow-dependent
// types like in Mypy, that is going to be a huge mess. Do we need match
// instead?
let names = match json_doc {
  case ps: List(Person) => ps.map(p => p.name)
  case ps: Map(String, Person) => ps.values().map(p => p.name)
  case p: Person => [p.name]
  case unexpected: _ => error(f"Unexpected json document: {unexpected}")
};

let people = match load("people.json") {
  case ps: List(Person) => ps
  case err: _ => error("File people.json has the wrong schema.")
};

// So syntax matters again ... how do we know where the end of the match
// statement is? Curly brackets after all? But then we are overloading them.
// If we do this, shouln't we also use them for if-then-else?
// Alternatively, some end token? "match ... endmatch"? But that would be first
// time so far that we do something like that.

// String literals can be types whose only allowed value is that string.
// Then we can build ADTs by manually tagging them, though it's not pretty:
type None = { tag: "none" };
type Some = T => { tag: "some", value: T };
type Option = T => None | Some(T);

match collection.get("key") {
  case x: Some(Int) => x.value
  case _: None => 0
}

// What about higher-kinded types? Probably we should stay away from this, the
// config language should remain simple. (But of course, if it's a useful
// language, people will use it for other things than just config ...)
let fmap:
  forall M: formall T: forall U:
  (T -> U) -> (M(T) -> M(U))
  = (f, xs) => builtins.map(f, xs);


// Separators and whitespace ... what if we just don't require any separators?
// I think it would work in the grammar ...
// And optionally allow a comma as separator maybe, to make it compatible with
// json?
let xs = [1, 2, 3, for i in range(1, 10): 2*i, 4, 5, 6]
// Still unambiguous but illegible for humans.
let xs = [1 2 3 for i in range(1, 10): 2 * i 4 5 6]
// Let's do:
// * Semicolon terminates things assigned by `=`, so `let` and ident assoc.
// * Comma terminates single elements and expr assoc.
// The last terminator in a collection is optional.
let xs = { a = 10; b = 11; };
let ys = { a: 10, b: 11 };
let zs = [1, 2, 3, for i in range(1, 10): 2 * i, 4, 5, 6];
let ws = {for i in range(1, 10): i: "uninit", 100: "uninit"};
// Do we really need comprehensions and elements to mix? Can just do this:
let zs = {for i in range(1, 10): i: "uninit"} | {100: "uninit"};
// It does simplify the AST though, so let's keep it.

// About the types and imports, they should be completely separate constructs.
// Types live completely separately, and they act as let-bindings in the file,
// respecting the scopes though.
type X = { a: Int, b: Bool };
type Z = X | Null;
// To import values, we use the `import` keyword:
let xs = import "deps/data.rcl";
// To import types, we use the `use` keyword:
use "deps/types.rcl" as Types;
// After this we can do:
let x: Types.X = ...;
// Or, instead of an alias, we can import specific types:
use "deps/types.rcl" (X, Z);

// Normally types follow the same scoping rules as expressions: they are only
// available after you define them, if you define one inside a comprehension
// then it doesn't leak, etc. Or maybe they should just be disallowed inside
// comprehensions ... but then you can have one inside a let inside a
// comprehension, which would be a weird distinction. But what about recursive
// types? We'll need a "let rec" equivalent:
type rec Json = Null | Bool | Int | String | List(Json) | Dict(String, Json);
// How to format lists with separators when there is no terminating one ...
// this is always a mess ... something like this?
type rec Json
  = Null
  | Bool
  | Int
  | String
  | List(Json)
  | Dict(String, Json)
  ;
