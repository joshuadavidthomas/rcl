// Take II at making RCL convenient for using HCL json [1].
// [1]: https://developer.hashicorp.com/terraform/language/syntax/json

let data = {
  ["resource", "aws_instance", "example"]: {
    ["provisioner", "local-exec"]: {
      command = "echo 'Hello World' > example.txt";
    },
    ["provisioner", "file"]: {
      source = "example.txt";
      destination = "/tmp/example.txt";
    },
    ["provisioner", "remote-exec"]: {
      inline = [
        "sudo install-something -f /tmp/example.txt",
      ];
    },
  }
};

// type Hcl
//   = Bool
//   | Int
//   | Str
//   | List[Hcl]
//   | Dict[Str, Hcl]
//   | Dict[List[Str], Hcl]
//   ;

// TODO: Should be `let rec`. Or should I have syntax for let'ing functions?
// let hcl = (data: Hcl) => {
let hcl = {
  let keys = {for k, v in data: if k is List[Str]: k[0]};

  for k, v in data: if k is Str: k: v,

  for group in keys:
  group: [
    for k, v in data:
    if k is List[Str]:
    if k[0] == group:
    (if k->len() == 1 then hcl(v) else hcl({ k[1:]: v })),
  ]
};

hcl(data)
