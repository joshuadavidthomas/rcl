// See also the other variant of this test. In this case, the non-error is first,
// which requires a different code path.
let f: (Number, Number) -> Bool = (x, y) => true;
let g: (Number, String) -> Bool = f;
null

# output:
stdin:4:35
  ╷
4 │ let g: (Number, String) -> Bool = f;
  ╵                                   ^
Error: Type mismatch inside this type:

  (Number, <E1>) -> Bool

At E1: Expected Number but found String.

stdin:3:17
  ╷
3 │ let f: (Number, Number) -> Bool = (x, y) => true;
  ╵                 ^~~~~~
Note: Expected Number because of this annotation.

stdin:4:17
  ╷
4 │ let g: (Number, String) -> Bool = f;
  ╵                 ^~~~~~
Note: Found String because of this annotation.
