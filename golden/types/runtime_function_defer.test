// Define a function with a static type, then forget the type.
let f: (Number) -> Any = x => let result: Any = 0; result;
let g: Any = f;
// Now we have to do a runtime check. In a static typecheck, we might defer the
// check to runtime, because an instance of `Number -> Any` *might* be an instance
// that happens to be `Number -> Bool`. But at runtime, if all we know is that the
// function returns `Any`, then we cannot guarantee that the value satisfies the
// annotated type, so it's an error.
let h: (Number) -> Bool = g;
null

# output:
stdin:9:27
  ╷
9 │ let h: (Number) -> Bool = g;
  ╵                           ^
Error: Type mismatch. Expected this type:

  (Number) -> Bool

But found this type:

  (x: Number) -> Any
