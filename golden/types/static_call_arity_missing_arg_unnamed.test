// If we define `f` without type annotation, then the inferred type would
// include the argument name. But now we forget the type.
let f: Any = x => x * 2;

// Then here we add the type back. But this time we lost the argument name.
let g: (Any) -> Number = f;

// This assertion would crash the program if we ever got to runtime. But the
// arity error below should be detected at typecheck time already.
assert false, "This should fail statically before it fails at runtime.";

// Now when we call `g`, we can infer from the type that we are passing too few
// arguments, but we can't name the missing argument.
g()

# output:
stdin:14:3
   ╷
14 │ g()
   ╵   ^
Error: Missing argument. The function takes 1 argument, but got 0.
