// RCL implements Black's "magic trailing comma" behavior.
// https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#the-magic-trailing-comma
// If there is a trailing comma originally, then the output is tall regardless
// regardless of whether it would fit wide. If there is no trailing comma, the
// output is whatever fits.

// Length 1.
let a = [1];
let b = [1,];
let c = [
  1
];
let d = [
  1,
];

// Length 2.
let a = [1, 2];
let b = [
  1, 2
];
let c = [1, 2,];
let d = [
  1, 2,
];

// Sets.
let a = {1, 2};
let b = {
  1, 2
};
let c = {1, 2,};
let d = {
  1, 2,
};

// Dicts.
let a = {a=1, b=2};
let b = {
  a=1, b=2
};
let c = {a=1, b=2,};
let d = {
  a=1, b=2,
};

// Function calls.
let a = f(1, 2);
let b = f(
  1, 2
);
let c = f(1, 2,);
let d = f(
  1, 2,
);

// Function definitions. Here a single argument is a special case.
let z = (x,) => 1;
let a = (x, y) => 1;
let b = (
  x, y
) => 1;
let c = (x, y,) => 1;
let d = (
  x, y,
) => 1;

// Generic types.
let a: List[Number, Number] = [];
let b: List[
  Number, Number
] = [];
let c: List[Number, Number,] = [];
let d: List[
  Number, Number,
] = [];

// Function types.
let a: (Number, Number) -> Number = null;
let b: (
  Number, Number
) -> Number = null;
let c: (Number, Number,) -> Number = null;
let d: (
  Number, Number,
) -> Number = null;

// This is a regression test for a non-idempotency.
// In sequences with a single comprehension,
// we don't output the trailing comma,
// therefore we can't respect it on input.
let compr_list = [
  for x in xs: x,
];
let compr_set = {
  for x in xs: x,
};
let compr_dict = {
  for x in xs: v = x,
};

null

# output:
// RCL implements Black's "magic trailing comma" behavior.
// https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#the-magic-trailing-comma
// If there is a trailing comma originally, then the output is tall regardless
// regardless of whether it would fit wide. If there is no trailing comma, the
// output is whatever fits.

// Length 1.
let a = [1];
let b = [
  1,
];
let c = [1];
let d = [
  1,
];

// Length 2.
let a = [1, 2];
let b = [1, 2];
let c = [
  1,
  2,
];
let d = [
  1,
  2,
];

// Sets.
let a = {1, 2};
let b = {1, 2};
let c = {
  1,
  2,
};
let d = {
  1,
  2,
};

// Dicts.
let a = { a = 1, b = 2 };
let b = { a = 1, b = 2 };
let c = {
  a = 1,
  b = 2,
};
let d = {
  a = 1,
  b = 2,
};

// Function calls.
let a = f(1, 2);
let b = f(1, 2);
let c = f(
  1,
  2,
);
let d = f(
  1,
  2,
);

// Function definitions. Here a single argument is a special case.
let z = x => 1;
let a = (x, y) => 1;
let b = (x, y) => 1;
let c = (
  x,
  y,
) => 1;
let d = (
  x,
  y,
) => 1;

// Generic types.
let a: List[Number, Number] = [];
let b: List[Number, Number] = [];
let c: List[
  Number,
  Number,
] = [];
let d: List[
  Number,
  Number,
] = [];

// Function types.
let a: (Number, Number) -> Number = null;
let b: (Number, Number) -> Number = null;
let c: (
  Number,
  Number,
) -> Number = null;
let d: (
  Number,
  Number,
) -> Number = null;

// This is a regression test for a non-idempotency.
// In sequences with a single comprehension,
// we don't output the trailing comma,
// therefore we can't respect it on input.
let compr_list = [for x in xs: x];
let compr_set = {for x in xs: x};
let compr_dict = { for x in xs: v = x };

null
