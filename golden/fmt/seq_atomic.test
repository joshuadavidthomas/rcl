// Here we test that the seq elements get formatted either wide or tall.
let oneline = [
  for x in xs
    .some_long_field
    .some_long_field
    .some_long_field:
  x
];

let multiline = [
  for x in xs
    .some_long_field
    .some_long_field
    .more_long_field
    .some_long_field:
  x
];

let multiline_tall = [
  for x in xs: for y in ys:
  for z in zs: for u in us:
  for v in vs: for w in ws:
  x + y + z + u + v + w
];

// A mix of `for`, `if`, and statements, and still they should go wide or tall
// together.
let stmts = [
  let xs = std.range(0, 100); trace xs;
  for x in xs: if x > 50: assert x > 50, "that condition should work";
  let ys = std.range(x, 100); for y in ys:
  x + y
];

[oneline, multiline, multiline_tall, stmts]

# output:
// Here we test that the seq elements get formatted either wide or tall.
let oneline = [for x in xs.some_long_field.some_long_field.some_long_field: x];

let multiline = [
  for x in xs.some_long_field.some_long_field.more_long_field.some_long_field: x
];

let multiline_tall = [
  for x in xs:
  for y in ys:
  for z in zs:
  for u in us:
  for v in vs:
  for w in ws:
  x + y + z + u + v + w
];

// A mix of `for`, `if`, and statements, and still they should go wide or tall
// together.
let stmts = [
  let xs = std.range(0, 100);
  trace xs;
  for x in xs:
  if x > 50:
  assert x > 50, "that condition should work";
  let ys = std.range(x, 100);
  for y in ys:
  x + y
];

[oneline, multiline, multiline_tall, stmts]
